<?php

/**
 * Implementation of hook_menu().
 */
function nd_visualshortcodes_menu() {
  $items = array();

  $items['admin/config/content/nd_visualshortcodes'] = array(
    'title' => 'ND Visual Shortcodes',
    'description' => 'Configure the Nikadevs Visual Shortcodes editor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nd_visualshortcodes_admin_main'),
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/ajax/nd_visualshortcodes/ajax_backend_layout'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_backend_layout',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/ajax/nd_visualshortcodes/ajax_backend_shortcode'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_backend_shortcode',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );
  $items['admin/ajax/nd_visualshortcodes/shortcodes_list_add'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_shortcodes_list_add',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/ajax/nd_visualshortcodes/shortcodes_list'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_shortcodes_list',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/ajax/nd_visualshortcodes/icons_autocomplete'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_icons_autocomplete',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/ajax/nd_visualshortcodes/node_autocomplete'] = array(
    'page callback' => 'nd_visualshortcodes_ajax_node_autocomplete',
    'access arguments' => array('administer nd visualshortcodes'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function nd_visualshortcodes_permission() {
  $arr = array();
  $arr['administer nd visualshortcodes'] = array(
    'title' => t('Customize ND Visual Shortcodes appearance'),
    'description' => t('Allow users to customize ND Visual Shortcodes appearance.')
  );
  return $arr;
}

function nd_visualshortcodes_admin_main($form, &$form_state) {
  $settings = variable_get('nd_visualshortcodes', array());
  $form['nd_visualshortcodes'] = array(
    '#tree' => TRUE,
  );
  $form['nd_visualshortcodes']['autostart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autostart Visual Shortcodes editor'),
    '#default_value' => isset($settings['autostart']) ? $settings['autostart'] : 1,
  );
  $form['nd_visualshortcodes']['confirm_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Confirm to delete shortcode'),
    '#default_value' => isset($settings['confirm_delete']) ? $settings['confirm_delete'] : 0
  );
  $formats = array();
  foreach(filter_formats() as $format) {
    $formats[$format->format] = $format->name;
  }
  $form['nd_visualshortcodes']['formats'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable for next Text Formats'),
    '#options' => $formats,
    '#default_value' => isset($settings['formats']) ? $settings['formats'] : array()
  );
  $form['nd_visualshortcodes_html_default_format'] = array(
    '#type' => 'select',
    '#title' => t('Default HTML tag Format'),
    '#options' => $formats,
    '#default_value' => variable_get('nd_visualshortcodes_html_default_format', NULL)
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_element_info_alter().
 */
function nd_visualshortcodes_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'nd_visualshortcodes_pre_render_text_format';
}

/**
 * This function creates the HTML objects required for nd_visualshortcodes.
 *
 * @param $element
 *   A fully populated form element to add the editor to.
 * @return
 *   The same $element with extra nd_visualshortcodes markup and initialization.
 */
function nd_visualshortcodes_pre_render_text_format($element) {
  static $init = FALSE;
  if (!isset($element['#format'])) {
    return $element;
  }

  if ($init === FALSE) {
    drupal_add_js(array('nd_visualshortcodes' => variable_get('nd_visualshortcodes', array())), 'setting');
    $init = TRUE;
  }

  if (isset($element['value'])) {
    if (!isset($element['format'])) {
      return $element;
    }
    if (isset($element['summary']) && $element['summary']['#type'] == 'textarea') {
      $element['value'] = nd_visualshortcodes_load_field($element['value'], $element['format']['format'], TRUE, $element['summary']['#id']);
      $element['summary'] = nd_visualshortcodes_load_field($element['summary'], $element['format']['format'], FALSE);
    }
    else {
      $element['value'] = nd_visualshortcodes_load_field($element['value'], $element['format']['format']);
    }
  }
  else {
    $element = nd_visualshortcodes_load_field($element, $element['#format']);
  }
  return $element;
}

function nd_visualshortcodes_load_field($field, $format, $show_toggle = TRUE, $add_fields_to_toggle = FALSE) {
  global $theme;
  static $processed_ids = array();
  $use_ckeditor = FALSE;
  $format_arr = FALSE;
  $prefix = '';
  if (is_array($format)) {
    $format_arr = $format;
    $format = isset($format_arr['#value']) ? $format_arr['#value'] : $format_arr['#default_value'];
  }

  if (!isset($field['#id'])) {
    return $field;
  }

  if (isset($processed_ids[$field['#id']])) {
    return $field;
  }

  if (key_exists('#nd_visualshortcodes', $field) && !$field['#nd_visualshortcodes']) {
    return $field;
  }

  if (isset($field['#access']) && !$field['#access']) {
    return $field;
  }

  if ($field['#id'] == "edit-log") {
    return $field;
  }

  if (isset($field['#attributes']['disabled']) && $field['#attributes']['disabled'] == 'disabled') {
    return $field;
  }

  if(empty($processed_ids)) {
    // Attach the editor css.
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes') . '/css/font-awesome.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes'). '/css/ionicons.min.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes'). '/css/flaticon.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes'). '/css/font-et-line.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes') . '/css/nikadevs-cms-layout-builder-min-bootstrap.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes') . '/css/jquery.colorpicker.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes') . '/css/nd-visualshortcodes.css';
    $field['#attached']['css'][] = drupal_get_path('module', 'nd_visualshortcodes') . '/css/social-icons.css';
    if(variable_get('nd_visualshortcodes_extra_css', '')) {
      $field['#attached']['css'][] = variable_get('nd_visualshortcodes_extra_css', '');
    }
    drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/bootstrap.min.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/drupal.js');
   // drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/shortcodes_frontend.js');
    drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/jquery.colorpicker.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/jquery.imagesloaded.min.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/SmoothScroll.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/jquery.easing.1.3.js');
    //drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/livicons-1.3.min.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/masonry.pkgd.min.js');
    //drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/jquery.sparkline.min.js');
    //drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/raphael.min.js');
    //drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/jquery.knob.js');
    drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/morris.min.js');
   // drupal_add_js(drupal_get_path('module','nd_visualshortcodes').'/js/jquery.carouFredSel-6.2.1-packed.js');

    drupal_add_css(drupal_get_path('module','nd_visualshortcodes').'/css/animate_progressive.css');




    //if(arg(0) != 'contact')
   // {
      //drupal_add_js('https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false',array('progress' => FALSE));
   // }
    if(arg(1) !='appearance' && arg(2) != 'settings')
    {
      drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/jquery-sortable.js');
    }
    drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/switchery.js');
    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    drupal_add_js('misc/states.js');
    drupal_add_js('misc/autocomplete.js');
    drupal_add_library('media','media_browser');
    drupal_add_library('media','media_browser_settings');
    //drupal_add_library('media','media_browser');
    drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/nd_visualshortcodes.js');
    drupal_add_js(array('pathmodule'=>drupal_get_path('module','nd_visualshortcodes')),'setting');
  }

  if (!isset($processed_ids[$field['#id']])) {
    $processed_ids[$field['#id']] = array();
  }

  $textarea_id = $field['#id'];

  $class[] = 'ckeditor-mod';
  $_ckeditor_ids[] = $textarea_id;

  if(user_access('administer nd visualshortcodes'))
  {
    $prefix = '<div class = "nd_visualshortcodes_links_wrap"><a class="nd_visualshortcodes_links btn btn-info btn-sm" href="#" data-disable-text = "' . str_replace("'", '"', t('Disable Visual Shortcodes')) . '" data-enable-text = "' . str_replace("'", '"', t('Enable Visual Shortcodes')) . '" data-id="' . $textarea_id . '" data-format = "' . $format . '">';
    $prefix .= t('Loading...');
    $prefix .= '</a><i class="fa fa-spinner fa-spin"></i></div>';
  }
  $field['#prefix'] = (isset($field['#prefix']) ? $field['#prefix'] : '') . $prefix;

  return $field;
}

/**
 * Return array with region ID and his HTML class name
*/
function nd_visualshortcodes_theme() {
  return array(
    'nd_visualshortcodes' => array(
      'variables' => array(
        'output' => ''
      ),
      'template' => 'nd-visualshortcodes',
    ),
  );
}

function nd_visualshortcodes_ajax_backend_layout() {
  if(!isset($_POST['code'])) {
    drupal_exit();
  }
  //print '<pre>';  print_r($_POST);  print '</pre>';
  $shortcodes = nd_visualshortcodes_process_shortcodes($_POST['code'], $_POST['format']);
  $output = theme('nd_visualshortcodes', array('output' => $shortcodes));
  print $output;
  drupal_exit();
}

function nd_visualshortcodes_ajax_backend_shortcode() {
  if(!isset($_POST['shortcode'])) {
    drupal_exit();
  }
  $build = drupal_get_form('nd_visualshortcodes_ajax_backend_shortcode_form');
  $form = render($build);
  $result = array('#type' => 'ajax');
  $result['#commands'][] = array(
    'command' => 'shortcode_settings',
    'method' => NULL,
    'selector' => '#nd-visualshortcodes-shortcode-settings',
    'data' => $form,
  );
  return $result;
}

function nd_visualshortcodes_ajax_backend_shortcode_form($form, &$form_state) {

  $shortcodes = shortcode_list_all();
  $shortcode = isset($form_state['values']['shortcode_name']) ? $form_state['values']['shortcode_name'] : $_POST['shortcode'];
  if(!isset($shortcodes[$shortcode]['process settings callback']) && function_exists($shortcodes[$shortcode]['process callback'] . '_settings')) {
    $shortcodes[$shortcode]['process settings callback'] = $shortcodes[$shortcode]['process callback'] . '_settings';
  }
  if(isset($shortcodes[$shortcode]['process settings callback'])) {
    $callback = isset($shortcodes[$shortcode]['process settings callback']) ? $shortcodes[$shortcode]['process settings callback'] : '';
    $form['shortcode_name'] = array(
      '#type' => 'hidden',
      '#value' => $shortcode
    );
    $form['shortcode'] = array(
      '#type' => 'fieldset',
      '#title' => t('Shortcode'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
      '#weight' => -5,
    );

    $form['shortcode']['settings'] = call_user_func($callback, $_POST['attrs'], $_POST['text'], array(), $form_state);
  }
  $text = $_POST['text'];
  $attrs = $_POST['attrs'];
  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
  );

  $form['paddings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Paddings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 1,
  );
  $form['margings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Margins'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 2,
  );
  $form['classes_animation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Classes, ID & Animation'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 3,
  );
  $form['border_radius'] = array(
    '#type' => 'fieldset',
    '#title' => t('Border'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 4,
  );
  $form['background'] = array(
    '#type' => 'fieldset',
    '#title' => t('Background'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 5,
  );

  $form['paddings']['container'] = array(
    '#type' => 'container',
    '#prefix' => '<div class = "row col-settings device-icons-wrap">',
    '#suffix' => '</div>'
  );
  $form['paddings']['container']['style_padding_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding Left'),
    '#default_value' => isset($attrs['style_padding_left']) ? $attrs['style_padding_left'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['paddings']['container']['style_padding_right'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding Right'),
    '#default_value' => isset($attrs['style_padding_right']) ? $attrs['style_padding_right'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['paddings']['container']['style_padding_top'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding Top'),
    '#default_value' => isset($attrs['style_padding_top']) ? $attrs['style_padding_top'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['paddings']['container']['style_padding_bottom'] = array(
    '#type' => 'textfield',
    '#title' => t('Padding Bottom'),
    '#default_value' => isset($attrs['style_padding_bottom']) ? $attrs['style_padding_bottom'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );

  $form['margings']['container'] = array(
    '#type' => 'container',
    '#prefix' => '<div class = "row col-settings device-icons-wrap">',
    '#suffix' => '</div>'
  );
  $form['margings']['container']['style_margin_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin Left'),
    '#default_value' => isset($attrs['style_margin_left']) ? $attrs['style_margin_left'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['margings']['container']['style_margin_right'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin Right'),
    '#default_value' => isset($attrs['style_margin_right']) ? $attrs['style_margin_right'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['margings']['container']['style_margin_top'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin Top'),
    '#default_value' => isset($attrs['style_margin_top']) ? $attrs['style_margin_top'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['margings']['container']['style_margin_bottom'] = array(
    '#type' => 'textfield',
    '#title' => t('Margin Bottom'),
    '#default_value' => isset($attrs['style_margin_bottom']) ? $attrs['style_margin_bottom'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );

  $form['classes_animation']['id'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#default_value' => isset($attrs['id']) ? $attrs['id'] : '',
    '#attributes' => array('class' => array('form-control')),
  );
  $form['classes_animation']['extra_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Extra Classes'),
    '#default_value' => isset($attrs['extra_classes']) ? $attrs['extra_classes'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '<div class = "row"><div class = "col-xs-6">',
  );
  $types = array('' => t('Default'), 'left' => t('Left'), 'center' => t('Center'), 'right' => t('Right'));
  $form['classes_animation']['text_align'] = array(
    '#type' => 'select',
    '#title' => t('Text Align'),
    '#options' => $types,
    '#default_value' => isset($attrs['text_align']) ? $attrs['text_align'] : '',
    '#attributes' => array('class' => array('form-control')),
    '#prefix' => '</div><div class = "col-xs-6">',
    '#suffix' => '</div></div>'
  );
  $form['classes_animation']['container']['animation'] = array(
    '#type' => 'select',
    '#title' => t('Animation'),
    '#options' => _nd_visualshortcodes_list_animations(),
    '#default_value' => isset($attrs['animation']) ? $attrs['animation'] : '',
    '#prefix' => '<div class = "row col-settings"><div class = "col-xs-6 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['classes_animation']['container']['animation_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Animation Delay (ms)'),
    '#default_value' => isset($attrs['animation_delay']) ? $attrs['animation_delay'] : '',
    '#prefix' => '<div class = "col-xs-6 centered">',
    '#suffix' => '</div></div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['classes_animation']['extra_style'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS Styles'),
    '#default_value' => isset($attrs['extra_style']) ? $attrs['extra_style'] : '',
    '#attributes' => array('class' => array('form-control')),
  );

  $form['border_radius']['different_values'] = array(
    '#type' => 'checkbox',
    '#title' => t('Different Border Radius'),
    '#default_value' => isset($attrs['different_values']) ? $attrs['different_values'] : FALSE,
    '#attributes' => array('class' => array('nd_visualshortcodes_different_values'))
  );
  $form['border_radius']['style_border_radius'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius'),
    '#default_value' => isset($attrs['style_border_radius']) ? $attrs['style_border_radius'] : FALSE,
    '#states' => array(
      'visible' => array(
        '.nd_visualshortcodes_different_values' => array('checked' => FALSE)
      )
    ),
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['container'] = array(
    '#type' => 'container',
    '#prefix' => '<div class = "row col-settings device-icons-wrap">',
    '#suffix' => '</div>',
    '#states' => array(
      'visible' => array(
        '.nd_visualshortcodes_different_values' => array('checked' => TRUE)
      )
    )
  );
  $form['border_radius']['container']['style_border_radius_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius Left'),
    '#default_value' => isset($attrs['style_border_radius_left']) ? $attrs['style_border_radius_left'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['container']['style_border_radius_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius Left'),
    '#default_value' => isset($attrs['style_border_radius_left']) ? $attrs['style_border_radius_left'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['container']['style_border_radius_right'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius Right'),
    '#default_value' => isset($attrs['style_border_radius_right']) ? $attrs['style_border_radius_right'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['container']['style_border_radius_top'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius Top'),
    '#default_value' => isset($attrs['style_border_radius_top']) ? $attrs['style_border_radius_top'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['container']['style_border_radius_bottom'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Radius Bottom'),
    '#default_value' => isset($attrs['style_border_radius_bottom']) ? $attrs['style_border_radius_bottom'] : '',
    '#prefix' => '<div class = "col-xs-3 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  // Border settings
  $form['border_radius']['style_border_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Width (px)'),
    '#default_value' => isset($attrs['style_border_width']) ? $attrs['style_border_width'] : '',
    '#prefix' => '<div class = "row"><div class = "col-xs-4 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $styles = array('' => t(' - None - '), 'dotted' => t('Dotted'), 'dashed' => t('Dashed'), 'solid' => t('Solid'), 'double' => t('Double'), 'groove' => t('Groove'), 'ridge' => t('Ridge'), 'inset' => t('Inset'), 'outset' => t('Outset'));
  $form['border_radius']['style_border_style'] = array(
    '#type' => 'select',
    '#title' => t('Border Style'),
    '#options' => $styles,
    '#default_value' => isset($attrs['style_border_style']) ? $attrs['style_border_style'] : '',
    '#prefix' => '<div class = "col-xs-4 centered">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['border_radius']['style_border_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Border Color'),
    '#default_value' => isset($attrs['style_border_color']) ? $attrs['style_border_color'] : '',
    '#prefix' => '<div class = "col-xs-4 centered">',
    '#suffix' => '</div></div>',
    '#attributes' => array('class' => array('form-control colorpicker-enable'))
  );
  // Background tab
  $form['background']['style_background_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Color'),
    '#default_value' => isset($attrs['style_background_color']) ? $attrs['style_background_color'] : FALSE,
    '#attributes' => array('class' => array('form-control colorpicker-enable'))
  );
  $filename = isset($attrs['style_background_image']) && !empty($attrs['style_background_image']) ? file_load($attrs['style_background_image'])->uri : '';
  $image = $filename ? theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $filename)) : '';
  $form['background']['style_background_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Image'),
    '#default_value' => isset($attrs['style_background_image']) ? $attrs['style_background_image'] : '',
    '#attributes' => array('class' => array('image-media-upload hidden')),
    '#field_suffix' => '<div class = "preview-image">' . $image . '</div><a href = "#" class = "media-upload button">' . t('Upload Image') .'</a><a href = "#" class = "media-remove button">' . t('Remove Image') .'</a>'
  );
  return $form;
}

function _nd_visualshortcodes_list_animations() {
  $animations = array('bounce', 'flash', 'pulse', 'rubberBand', 'shake', 'swing', 'tada', 'wobble', 'bounceIn', 'bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp', 'bounceOut', 'bounceOutDown', 'bounceOutLeft', 'bounceOutRight', 'bounceOutUp', 'fadeIn', 'fadeInDown', 'fadeInDownBig', 'fadeInLeft', 'fadeInLeftBig', 'fadeInRight', 'fadeInRightBig', 'fadeInUp', 'fadeInUpBig', 'fadeOut', 'fadeOutDown', 'fadeOutDownBig', 'fadeOutLeft', 'fadeOutLeftBig', 'fadeOutRight', 'fadeOutRightBig', 'fadeOutUp', 'fadeOutUpBig', 'flip', 'flipInX', 'flipInY', 'flipOutX', 'flipOutY', 'lightSpeedIn', 'lightSpeedOut', 'rotateIn', 'rotateInDownLeft', 'rotateInDownRight', 'rotateInUpLeft', 'rotateInUpRight', 'rotateOut', 'rotateOutDownLeft', 'rotateOutDownRight', 'rotateOutUpLeft', 'rotateOutUpRight', 'hinge', 'rollIn', 'rollOut', 'zoomIn', 'zoomInDown', 'zoomInLeft', 'zoomInRight', 'zoomInUp', 'zoomOut', 'zoomOutDown', 'zoomOutLeft', 'zoomOutRight', 'zoomOutUp'
  );
  return array('' => t(' - None - ')) + array_combine($animations, $animations);
}

function nd_visualshortcodes_ajax_shortcodes_list() {
  $shortcodes = nd_visualshortcodes_list_all_enabled($_POST['format']);
  $child = !empty($_POST['shortcode']) && isset($shortcodes[$_POST['shortcode']]['child shortcode']) ? $shortcodes[$_POST['shortcode']]['child shortcode']  : '';
  $value = $child ? ' value="' . $shortcodes[$child]['title'] . '" data-exactly = "1"' : '';
  $output = '<div class = "nd_visualshortcodes_enabled_list">';
  $output .= '<div class = "nd_visualshortcodes_enabled_list_search"><input type = "text" class = "form-control" ' . $value . 'placeholder = "Search shortcode"/></div>';
  $output .= '<div class = "nd_visualshortcodes_enabled_links">';
  foreach($shortcodes as $name => $shortcode) {
    $icon = $shortcode['icon'] ? '<i class = "' . $shortcode['icon'] . '"></i>' : '';
    $output .= '<a href = "#" data-title = "' . strtolower($shortcode['title']) . '" data-shortcode = "' . $name . '" class = "btn btn-md btn-info"><span>' . $icon . $shortcode['title'] . '</span></a>';
  }
  $output .= '</div></div>';
  print $output;
  drupal_exit();
}

/**
 * Returns only enabled Shortcodes for a specified input format.
 */
function nd_visualshortcodes_list_all_enabled($format, $reset = FALSE) {
  if (is_string($format)) {
    $format = filter_format_load($format);
  }

  $shortcodes_enabled = &drupal_static(__FUNCTION__, array());

  if (isset($shortcodes_enabled[$format->format]) && !$reset) {
    return $shortcodes_enabled[$format->format];
  }
  $shortcodes_enabled[$format->format] = array();

  $shortcodes = shortcode_list_all($reset);
  $filters = filter_list_format($format->format);


  if ( !empty($filters['shortcode'])) {
    // Run through all Shortcodes defined.
    foreach ($filters['shortcode']->settings as $name => $enabled) {
      if ($enabled) {
        $shortcodes_enabled[$format->format][$name] = $shortcodes[$name];
      }
    }
  }
  if ( !empty($filters['shortcode_dynamic'])) {
    // Run through all Shortcodes defined.
    foreach ($filters['shortcode_dynamic']->settings as $name => $enabled) {
      if ($enabled) {
        $shortcodes_enabled[$format->format][$name] = $shortcodes[$name];
      }
    }
  }
  ksort($shortcodes_enabled[$format->format]);
  return $shortcodes_enabled[$format->format];
}

function nd_visualshortcodes_ajax_shortcodes_list_add() {
  $shortcodes = shortcode_list_all();
  $shortcode = $shortcodes[$_POST['shortcode']];
  $function = isset($shortcode['process backend callback']) ? $shortcode['process backend callback'] : '_nd_visualshortcodes_backend_element';
  $element = call_user_func($function, array(), '', $_POST['shortcode']);
  print $element;
  drupal_exit();
}

function nd_visualshortcodes_process_shortcodes($text, $format) {
  $text = trim($text);
  // Wrap any code in begining of the text, search to first shortcode
  $text = preg_replace('/^(?<!\[)([^\[]+)/si', "\n" .  '[html]${1}[/html]${2}', $text);
  // Wrap any code on the end of the text
  $text = preg_replace('/(\])(?<!\[html)([^\]\[]+$)/si', '${1}[html]${2}[/html]', $text);
  // Wrap any code from the begining to the end of the text
  $text = preg_replace('/^(?<!\[)(?<!\[html\])([^\]\[]+$)/si', "\n" .'[html]{1}${2}${3}[/html]'. "\n", $text);
  // Wrap inside shortcode with next to another shortcode
  $text = preg_replace('/(\[[a-z]+[^\]]*\])(?<!\[html\])([\s]*)([^\s\[]+[^\[]+)/si', '${1}[html]${2}${3}[/html]', $text);
  // Wrap between two shortcodes
  $text = preg_replace('/(\[\/[a-z]+\])([\s]*)([^\s\[]+[^\[]+)/si', '${1}[html]${2}${3}[/html]', $text);
  // Clean double [html] tags
  $text = preg_replace('/(\[html[^\]]*\])[\s]*\[html[^\]]*\]/s', '${1}', $text);
  $text = preg_replace('/(\[\/html\])[\s]*\[\/html\]/s', '[/html]', $text);
  // Remove the empty [html] tags
  $text = preg_replace('/(\[html[^\]]*\])[\s]*\[\/html]*\]/s', '', $text);
  // Get filters assigned to selected format
  $filters = filter_list_format($format);
  $filter_info = filter_get_filters();
  foreach ($filters as $name => $filter) {
    if ($filter->status && isset($filter_info[$name]['process callback'])) {
      $text = _nd_visualshortcodes_backend_process($text, $filter);
    }
  }
  return $text;
}

/**
 * Processes the Shortcodes according to the text and the text format.
 */
function _nd_visualshortcodes_backend_process($text, $filter) {
  $shortcodes = shortcode_list_all();
  $shortcodes_enabled = array();

  foreach ($filter->settings as $name => $value) {
    if ($value && !empty($shortcodes[$name]['process callback'])) {
      $shortcodes_enabled[$name] = array(
        'function' => isset($shortcodes[$name]['process backend callback']) ? $shortcodes[$name]['process backend callback'] : '_nd_visualshortcodes_backend_element',
      );
    }
  }

  if (empty($shortcodes_enabled)) {
    return $text;
  }

  // Save the Shortcodes in the local cache.
  _shortcode_tags($shortcodes_enabled);

  // Processing recursively, now embeding tags within other tags is supported!
  $chunks = preg_split('!(\[{1,2}.*?\]{1,2})!', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  $heap = array();
  $heap_index = array();

  foreach ($chunks as $c) {
    if (!$c) {
      continue;
    }

    $escaped = FALSE;

    if ((substr($c, 0, 2) == '[[') && (substr($c, -2, 2) == ']]')) {
      $escaped = TRUE;
      // Checks media tags, eg: [[{ }]].
      if ((substr($c, 0, 3) != '{') && (substr($c, -3, 1) != '}')) {
        // Removes the outer [].
        $c = substr($c, 1, -1);
      }
    }
    // Decide this is a Shortcode tag or not.
    if (!$escaped && ($c[0] == '[') && (substr($c, -1, 1) == ']')) {
      // The $c maybe contains Shortcode macro.

      // This is maybe a self-closing tag.
      // Removes outer [].
      $original_text = $c;
      $c = substr($c, 1, -1);
      $c = trim($c);

      $ts = explode(' ', $c);
      $tag = array_shift($ts);
      $tag = trim($tag, '/');

      if (!shortcode_is_tag($tag)) {
        // The current tag is not enabled.
        array_unshift($heap_index, '_string_');
        array_unshift($heap, $original_text);
      }
      elseif (substr($c, -1, 1) == '/') {
        // Processes a self closing tag, - it has "/" at the end-
        /*
         * The exploded array elements meaning:
         * 0 - the full tag text?
         * 1/5 - An extra [] to allow for escaping Shortcodes with double [[]].
         * 2 - The Shortcode name.
         * 3 - The Shortcode argument list.
         * 4 - The content of a Shortcode when it wraps some content.
         */

        $m = array(
          $c,
          '',
          $tag,
          implode(' ', $ts),
          NULL,
          '',
        );
        array_unshift($heap_index, '_string_');
        array_unshift($heap, _shortcode_process_tag($m));
      }
      elseif ($c[0] == '/') {
        // Indicate a closing tag, so we process the heap.
        $closing_tag = substr($c, 1);

        $process_heap = array();
        $process_heap_index = array();
        $found = FALSE;

        // Get elements from heap and process.
        do {
          $tag = array_shift($heap_index);
          $heap_text = array_shift($heap);

          if ($closing_tag == $tag) {
            // Process the whole tag.
            $m = array(
              $tag . ' ' . $heap_text,
              '',
              $tag,
              $heap_text,
              implode('', $process_heap),
              '',
            );
            $str = _shortcode_process_tag($m);
            array_unshift($heap_index, '_string_');
            array_unshift($heap, $str);
            $found = TRUE;
          }
          else {
            array_unshift($process_heap, $heap_text);
            array_unshift($process_heap_index, $tag);
          }
        } while (!$found && $heap);

        if (!$found) {
          foreach ($process_heap as $val) {
            array_unshift($heap, $val);
          }
          foreach ($process_heap_index as $val) {
            array_unshift($heap_index, $val);
          }
        }

      }
      else {
        // This is a starting tag. Put it to the heap.
        array_unshift($heap_index, $tag);
        array_unshift($heap, implode(' ', $ts));
      }
      // If escaped or not a Shortcode.
    }
    else {
      // Maybe not found a pair?
      array_unshift($heap_index, '_string_');
      array_unshift($heap, $c);
    }
    // End of foreach.
  }

  return (implode('', array_reverse($heap)));
}

function _nd_visualshortcodes_backend_description($attrs, $text) {
  $description = '';
  $shortcodes = shortcode_list_all();
  if(isset($shortcodes[$attrs['shortcode']]['description_field'])) {
    $field = $shortcodes[$attrs['shortcode']]['description_field'];
    if(isset($attrs[$field]) && $attrs[$field]) {
      $description = ' <small>(' . truncate_utf8($attrs[$field], 40, TRUE, TRUE) . ')</small>';
    }
    elseif($attrs['shortcode'] == 'html') {
      $text = trim(strip_tags($text));
      $description = $text ? ' <small>(' . truncate_utf8($text, 30, TRUE, TRUE) . ')</small>' : '';
    }
  }
  elseif(isset($shortcodes[$attrs['shortcode']]['description_callback'])) {
    $text = call_user_func($shortcodes[$attrs['shortcode']]['description_callback'], $attrs, $text);
    $description = $text ? ' <small>(' . $text . ')</small>' : '';
  }
  return $description;
}

function _nd_visualshortcodes_backend_element($attrs, $text, $el = '') {
  $shortcodes = shortcode_list_all();
  if(isset($attrs['class'])) {
    $attrs['extra_classes'] = $attrs['class'] . (isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '');
  }
  $attrs['class'] = 'row shortcode-processed nd-visualshortcodes-sortable nd-visualshortcodes-parent-wrap';
  $attrs['shortcode'] = $el;
  $title = is_array($shortcodes[$el]['title']) ? '' : $shortcodes[$el]['title'];
  $text = is_array($text) ? '' : $text;
  return '<li ' . drupal_attributes($attrs) . '><div class = "border-style clearfix"><h3><i class="fa fa-arrows"></i><span>' . $title . _nd_visualshortcodes_backend_description($attrs, $text) . '</span><span class = "nd-visualshortcodes-settings-links"><i class="fa fa-copy nd-visualshortcodes-copy"></i><i class="fa fa-plus-square nd_visualshortcodes_add"></i><i class="fa fa-edit shortcode-settings"></i></span></h3><ol class = "nd-visualshortcodes-parent">' . $text . '</ol></div></li>';
}

function nd_visualshortcodes_backend_nochilds($attrs, $text, $el = '') {
  $text = trim($text);
  // In old code can be stored text inside nochild element, show for this case default element
  if(!empty($text) && $el != 'html') {
    return _nd_visualshortcodes_backend_element($attrs, $text, $el);
  }
  $shortcodes = shortcode_list_all();
  if(isset($attrs['class'])) {
    $attrs['extra_classes'] = $attrs['class'] . (isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '');
  }
  $attrs['class'] = 'row shortcode-processed nd-visualshortcodes-sortable';
  $attrs['shortcode'] = $el;
  return '<li ' . drupal_attributes($attrs) . '><div class = "border-style border-none clearfix"><h3><i class="fa fa-arrows"></i><span>' . $shortcodes[$el]['title'] . _nd_visualshortcodes_backend_description($attrs, $text) . '</span><span class = "nd-visualshortcodes-settings-links"><i class="fa fa-copy nd-visualshortcodes-copy"></i><i class="fa fa-edit shortcode-settings"></i></span></h3><div class = "hidden">' . $text . '</div></div></li>';
}

function nd_visualshortcodes_backend_row($attrs, $text, $el = '') {
  $shortcodes = shortcode_list_all();
  if(isset($attrs['class'])) {
    $attrs['extra_classes'] = $attrs['class'] . (isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '');
  }
  $attrs['class'] = 'row shortcode-processed nd-visualshortcodes-sortable nd-visualshortcodes-parent-wrap';
  $attrs['shortcode'] = $el;
  return '<li ' . drupal_attributes($attrs) . '><div class = "border-style clearfix"><h3><i class="fa fa-arrows"></i><span>' . $shortcodes[$el]['title'] . _nd_visualshortcodes_backend_description($attrs, $text) . '</span><span class = "nd-visualshortcodes-settings-links"><i class="fa fa-copy nd-visualshortcodes-copy"></i><i class="fa fa-plus-square nd_visualshortcodes_add"></i><i class="fa fa-edit shortcode-settings"></i></span></h3><ol class = "row nd-visualshortcodes-parent">' . $text . '</ol></div></li>';
}

function nd_visualshortcodes_backend_col($attrs, $text, $el = '') {
  $shortcodes = shortcode_list_all();
  if(isset($attrs['class'])) {
    $attrs['extra_classes'] = $attrs['class'] . (isset($attrs['extra_classes']) ? ' ' . $attrs['extra_classes'] : '');
  }
  $attrs['class'] = 'shortcode-processed nd-visualshortcodes-sortable nd-visualshortcodes-parent-wrap';
  if(isset($attrs['phone'])) {
    $attrs['class'] .= ' col-xs-' . $attrs['phone'];
  }
  if(isset($attrs['tablet'])) {
    $attrs['class'] .= ' col-sm-' . $attrs['tablet'];
  }
  if(isset($attrs['desktop'])) {
    $attrs['class'] .= ' col-md-' . $attrs['desktop'];
  }
  if(isset($attrs['wide'])) {
    $attrs['class'] .= ' col-lg-' . $attrs['wide'];
  }
  $attrs['shortcode'] = $el;
  return '<li ' . drupal_attributes($attrs) . '><div class = "border-style clearfix"><h3><i class="fa fa-arrows"></i><span>' . $shortcodes[$el]['title'] . _nd_visualshortcodes_backend_description($attrs, $text) . '</span><span class = "nd-visualshortcodes-settings-links"><i class="fa fa-copy nd-visualshortcodes-copy"></i><i class="fa fa-plus-square nd_visualshortcodes_add"></i><i class="fa fa-edit shortcode-settings"></i></span></h3><ol class = "nd-visualshortcodes-parent">' . $text . '</ol></div></li>';
}



function nd_visualshortcodes_shortcode_col_settings($attrs, $text) {
  $form['container'] = array(
    '#type' => 'container',
    '#prefix' => '<div class = "row col-settings device-icons-wrap">',
    '#suffix' => '</div>'
  );
  $options = array('' => t('Auto'), 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 11 => 11, 12 => 12);
  $form['container']['phone'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['phone']) ? $attrs['phone'] : 0,
    '#prefix' => '<div class = "col-xs-3 centered"><label class="sr-only" for="col-xs"><i class="fa fa-mobile fa-5x"></i></label>',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['container']['tablet'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['tablet']) ? $attrs['tablet'] : 0,
    '#prefix' => '<div class = "col-xs-3 centered"><label class="sr-only" for="col-xs"><i class="fa fa-tablet fa-5x"></i></label>',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['container']['desktop'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['desktop']) ? $attrs['desktop'] : 0,
    '#prefix' => '<div class = "col-xs-3 centered"><label class="sr-only" for="col-xs"><i class="fa fa-laptop fa-5x"></i></label>',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );
  $form['container']['wide'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($attrs['wide']) ? $attrs['wide'] : 0,
    '#prefix' => '<div class = "col-xs-3 centered"><label class="sr-only" for="col-xs"><i class="fa fa-desktop fa-5x"></i></label>',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('form-control'))
  );

  return $form;
}

function nd_visualshortcodes_ajax_icons_autocomplete($type, $str) {
  $icons = array();
  if($type == 'font_awesome' || $type == 'all') {
    $font_awesome = array('fa fa-automobile', 'fa fa-bank', 'fa fa-behance', 'fa fa-behance-square', 'fa fa-bomb', 'fa fa-building', 'fa fa-cab', 'fa fa-car', 'fa fa-child', 'fa fa-circle-o-notch', 'fa fa-circle-thin', 'fa fa-codepen', 'fa fa-cube', 'fa fa-cubes', 'fa fa-database', 'fa fa-delicious', 'fa fa-deviantart', 'fa fa-digg', 'fa fa-drupal', 'fa fa-empire', 'fa fa-envelope-square', 'fa fa-fax', 'fa fa-file-archive-o', 'fa fa-file-audio-o', 'fa fa-file-code-o', 'fa fa-file-excel-o', 'fa fa-file-image-o', 'fa fa-file-movie-o', 'fa fa-file-pdf-o', 'fa fa-file-photo-o', 'fa fa-file-picture-o', 'fa fa-file-powerpoint-o', 'fa fa-file-sound-o', 'fa fa-file-video-o', 'fa fa-file-word-o', 'fa fa-file-zip-o', 'fa fa-ge', 'fa fa-git', 'fa fa-git-square', 'fa fa-google', 'fa fa-graduation-cap', 'fa fa-hacker-news', 'fa fa-header', 'fa fa-history', 'fa fa-institution', 'fa fa-joomla', 'fa fa-jsfiddle', 'fa fa-language', 'fa fa-life-bouy', 'fa fa-life-ring', 'fa fa-life-saver', 'fa fa-mortar-board', 'fa fa-openid', 'fa fa-paper-plane', 'fa fa-paper-plane-o', 'fa fa-paragraph', 'fa fa-paw', 'fa fa-pied-piper', 'fa fa-pied-piper-alt', 'fa fa-pied-piper-square', 'fa fa-qq', 'fa fa-ra', 'fa fa-rebel', 'fa fa-recycle', 'fa fa-reddit', 'fa fa-reddit-square', 'fa fa-send', 'fa fa-send-o', 'fa fa-share-alt', 'fa fa-share-alt-square', 'fa fa-slack', 'fa fa-sliders', 'fa fa-soundcloud', 'fa fa-space-shuttle', 'fa fa-spoon', 'fa fa-spotify', 'fa fa-steam', 'fa fa-steam-square', 'fa fa-stumbleupon', 'fa fa-stumbleupon-circle', 'fa fa-support', 'fa fa-taxi', 'fa fa-tencent-weibo', 'fa fa-tree', 'fa fa-university', 'fa fa-vine', 'fa fa-wechat', 'fa fa-weixin', 'fa fa-wordpress', 'fa fa-yahoo', 'fa fa-adjust', 'fa fa-anchor', 'fa fa-archive', 'fa fa-arrows', 'fa fa-arrows-h', 'fa fa-arrows-v', 'fa fa-asterisk', 'fa fa-automobile', 'fa fa-ban', 'fa fa-bank', 'fa fa-bar-chart-o', 'fa fa-barcode', 'fa fa-bars', 'fa fa-beer', 'fa fa-bell', 'fa fa-bell-o', 'fa fa-bolt', 'fa fa-bomb', 'fa fa-book', 'fa fa-bookmark', 'fa fa-bookmark-o', 'fa fa-briefcase', 'fa fa-bug', 'fa fa-building', 'fa fa-building-o', 'fa fa-bullhorn', 'fa fa-bullseye', 'fa fa-cab', 'fa fa-calendar', 'fa fa-calendar-o', 'fa fa-camera', 'fa fa-camera-retro', 'fa fa-car', 'fa fa-caret-square-o-down', 'fa fa-caret-square-o-left', 'fa fa-caret-square-o-right', 'fa fa-caret-square-o-up', 'fa fa-certificate', 'fa fa-check', 'fa fa-check-circle', 'fa fa-check-circle-o', 'fa fa-check-square', 'fa fa-check-square-o', 'fa fa-child', 'fa fa-circle', 'fa fa-circle-o', 'fa fa-circle-o-notch', 'fa fa-circle-thin', 'fa fa-clock-o', 'fa fa-cloud', 'fa fa-cloud-download', 'fa fa-cloud-upload', 'fa fa-code', 'fa fa-code-fork', 'fa fa-coffee', 'fa fa-cog', 'fa fa-cogs', 'fa fa-comment', 'fa fa-comment-o', 'fa fa-comments', 'fa fa-comments-o', 'fa fa-compass', 'fa fa-credit-card', 'fa fa-crop', 'fa fa-crosshairs', 'fa fa-cube', 'fa fa-cubes', 'fa fa-cutlery', 'fa fa-dashboard', 'fa fa-database', 'fa fa-desktop', 'fa fa-dot-circle-o', 'fa fa-download', 'fa fa-edit', 'fa fa-ellipsis-h', 'fa fa-ellipsis-v', 'fa fa-envelope', 'fa fa-envelope-o', 'fa fa-envelope-square', 'fa fa-eraser', 'fa fa-exchange', 'fa fa-exclamation', 'fa fa-exclamation-circle', 'fa fa-exclamation-triangle', 'fa fa-external-link', 'fa fa-external-link-square', 'fa fa-eye', 'fa fa-eye-slash', 'fa fa-fax', 'fa fa-female', 'fa fa-fighter-jet', 'fa fa-file-archive-o', 'fa fa-file-audio-o', 'fa fa-file-code-o', 'fa fa-file-excel-o', 'fa fa-file-image-o', 'fa fa-file-movie-o', 'fa fa-file-pdf-o', 'fa fa-file-photo-o', 'fa fa-file-picture-o', 'fa fa-file-powerpoint-o', 'fa fa-file-sound-o', 'fa fa-file-video-o', 'fa fa-file-word-o', 'fa fa-file-zip-o', 'fa fa-film', 'fa fa-filter', 'fa fa-fire', 'fa fa-fire-extinguisher', 'fa fa-flag', 'fa fa-flag-checkered', 'fa fa-flag-o', 'fa fa-flash', 'fa fa-flask', 'fa fa-folder', 'fa fa-folder-o', 'fa fa-folder-open', 'fa fa-folder-open-o', 'fa fa-frown-o', 'fa fa-gamepad', 'fa fa-gavel', 'fa fa-gear', 'fa fa-gears', 'fa fa-gift', 'fa fa-glass', 'fa fa-globe', 'fa fa-graduation-cap', 'fa fa-group', 'fa fa-hdd-o', 'fa fa-headphones', 'fa fa-heart', 'fa fa-heart-o', 'fa fa-history', 'fa fa-home', 'fa fa-image', 'fa fa-inbox', 'fa fa-info', 'fa fa-info-circle', 'fa fa-institution', 'fa fa-key', 'fa fa-keyboard-o', 'fa fa-language', 'fa fa-laptop', 'fa fa-leaf', 'fa fa-legal', 'fa fa-lemon-o', 'fa fa-level-down', 'fa fa-level-up', 'fa fa-life-bouy', 'fa fa-life-ring', 'fa fa-life-saver', 'fa fa-lightbulb-o', 'fa fa-location-arrow', 'fa fa-lock', 'fa fa-magic', 'fa fa-magnet', 'fa fa-mail-forward', 'fa fa-mail-reply', 'fa fa-mail-reply-all', 'fa fa-male', 'fa fa-map-marker', 'fa fa-meh-o', 'fa fa-microphone', 'fa fa-microphone-slash', 'fa fa-minus', 'fa fa-minus-circle', 'fa fa-minus-square', 'fa fa-minus-square-o', 'fa fa-mobile', 'fa fa-mobile-phone', 'fa fa-money', 'fa fa-moon-o', 'fa fa-mortar-board', 'fa fa-music', 'fa fa-navicon', 'fa fa-paper-plane', 'fa fa-paper-plane-o', 'fa fa-paw', 'fa fa-pencil', 'fa fa-pencil-square', 'fa fa-pencil-square-o', 'fa fa-phone', 'fa fa-phone-square', 'fa fa-photo', 'fa fa-picture-o', 'fa fa-plane', 'fa fa-plus', 'fa fa-plus-circle', 'fa fa-plus-square', 'fa fa-plus-square-o', 'fa fa-power-off', 'fa fa-print', 'fa fa-puzzle-piece', 'fa fa-qrcode', 'fa fa-question', 'fa fa-question-circle', 'fa fa-quote-left', 'fa fa-quote-right', 'fa fa-random', 'fa fa-recycle', 'fa fa-refresh', 'fa fa-reorder', 'fa fa-reply', 'fa fa-reply-all', 'fa fa-retweet', 'fa fa-road', 'fa fa-rocket', 'fa fa-rss', 'fa fa-rss-square', 'fa fa-search', 'fa fa-search-minus', 'fa fa-search-plus', 'fa fa-send', 'fa fa-send-o', 'fa fa-share', 'fa fa-share-alt', 'fa fa-share-alt-square', 'fa fa-share-square', 'fa fa-share-square-o', 'fa fa-shield', 'fa fa-shopping-cart', 'fa fa-sign-in', 'fa fa-sign-out', 'fa fa-signal', 'fa fa-sitemap', 'fa fa-sliders', 'fa fa-smile-o', 'fa fa-sort', 'fa fa-sort-alpha-asc', 'fa fa-sort-alpha-desc', 'fa fa-sort-amount-asc', 'fa fa-sort-amount-desc', 'fa fa-sort-asc', 'fa fa-sort-desc', 'fa fa-sort-down', 'fa fa-sort-numeric-asc', 'fa fa-sort-numeric-desc', 'fa fa-sort-up', 'fa fa-space-shuttle', 'fa fa-spinner', 'fa fa-spoon', 'fa fa-square', 'fa fa-square-o', 'fa fa-star', 'fa fa-star-half', 'fa fa-star-half-empty', 'fa fa-star-half-full', 'fa fa-star-half-o', 'fa fa-star-o', 'fa fa-suitcase', 'fa fa-sun-o', 'fa fa-support', 'fa fa-tablet', 'fa fa-tachometer', 'fa fa-tag', 'fa fa-tags', 'fa fa-tasks', 'fa fa-taxi', 'fa fa-terminal', 'fa fa-thumb-tack', 'fa fa-thumbs-down', 'fa fa-thumbs-o-down', 'fa fa-thumbs-o-up', 'fa fa-thumbs-up', 'fa fa-ticket', 'fa fa-times', 'fa fa-times-circle', 'fa fa-times-circle-o', 'fa fa-tint', 'fa fa-toggle-down', 'fa fa-toggle-left', 'fa fa-toggle-right', 'fa fa-toggle-up', 'fa fa-trash-o', 'fa fa-tree', 'fa fa-trophy', 'fa fa-truck', 'fa fa-umbrella', 'fa fa-university', 'fa fa-unlock', 'fa fa-unlock-alt', 'fa fa-unsorted', 'fa fa-upload', 'fa fa-user', 'fa fa-users', 'fa fa-video-camera', 'fa fa-volume-down', 'fa fa-volume-off', 'fa fa-volume-up', 'fa fa-warning', 'fa fa-wheelchair', 'fa fa-wrench', 'fa fa-file', 'fa fa-file-archive-o', 'fa fa-file-audio-o', 'fa fa-file-code-o', 'fa fa-file-excel-o', 'fa fa-file-image-o', 'fa fa-file-movie-o', 'fa fa-file-o', 'fa fa-file-pdf-o', 'fa fa-file-photo-o', 'fa fa-file-picture-o', 'fa fa-file-powerpoint-o', 'fa fa-file-sound-o', 'fa fa-file-text', 'fa fa-file-text-o', 'fa fa-file-video-o', 'fa fa-file-word-o', 'fa fa-file-zip-o', 'fa fa-circle-o-notch', 'fa fa-cog', 'fa fa-gear', 'fa fa-refresh', 'fa fa-spinner', 'fa fa-check-square', 'fa fa-check-square-o', 'fa fa-circle', 'fa fa-circle-o', 'fa fa-dot-circle-o', 'fa fa-minus-square', 'fa fa-minus-square-o', 'fa fa-plus-square', 'fa fa-plus-square-o', 'fa fa-square', 'fa fa-square-o', 'fa fa-bitcoin', 'fa fa-btc', 'fa fa-cny', 'fa fa-dollar', 'fa fa-eur', 'fa fa-euro', 'fa fa-gbp', 'fa fa-inr', 'fa fa-jpy', 'fa fa-krw', 'fa fa-money', 'fa fa-rmb', 'fa fa-rouble', 'fa fa-rub', 'fa fa-ruble', 'fa fa-rupee', 'fa fa-try', 'fa fa-turkish-lira', 'fa fa-usd', 'fa fa-won', 'fa fa-yen', 'fa fa-align-center', 'fa fa-align-justify', 'fa fa-align-left', 'fa fa-align-right', 'fa fa-bold', 'fa fa-chain', 'fa fa-chain-broken', 'fa fa-clipboard', 'fa fa-columns', 'fa fa-copy', 'fa fa-cut', 'fa fa-dedent', 'fa fa-eraser', 'fa fa-file', 'fa fa-file-o', 'fa fa-file-text', 'fa fa-file-text-o', 'fa fa-files-o', 'fa fa-floppy-o', 'fa fa-font', 'fa fa-header', 'fa fa-indent', 'fa fa-italic', 'fa fa-link', 'fa fa-list', 'fa fa-list-alt', 'fa fa-list-ol', 'fa fa-list-ul', 'fa fa-outdent', 'fa fa-paperclip', 'fa fa-paragraph', 'fa fa-paste', 'fa fa-repeat', 'fa fa-rotate-left', 'fa fa-rotate-right', 'fa fa-save', 'fa fa-scissors', 'fa fa-strikethrough', 'fa fa-subscript', 'fa fa-superscript', 'fa fa-table', 'fa fa-text-height', 'fa fa-text-width', 'fa fa-th', 'fa fa-th-large', 'fa fa-th-list', 'fa fa-underline', 'fa fa-undo', 'fa fa-unlink', 'fa fa-angle-double-down', 'fa fa-angle-double-left', 'fa fa-angle-double-right', 'fa fa-angle-double-up', 'fa fa-angle-down', 'fa fa-angle-left', 'fa fa-angle-right', 'fa fa-angle-up', 'fa fa-arrow-circle-down', 'fa fa-arrow-circle-left', 'fa fa-arrow-circle-o-down', 'fa fa-arrow-circle-o-left', 'fa fa-arrow-circle-o-right', 'fa fa-arrow-circle-o-up', 'fa fa-arrow-circle-right', 'fa fa-arrow-circle-up', 'fa fa-arrow-down', 'fa fa-arrow-left', 'fa fa-arrow-right', 'fa fa-arrow-up', 'fa fa-arrows', 'fa fa-arrows-alt', 'fa fa-arrows-h', 'fa fa-arrows-v', 'fa fa-caret-down', 'fa fa-caret-left', 'fa fa-caret-right', 'fa fa-caret-square-o-down', 'fa fa-caret-square-o-left', 'fa fa-caret-square-o-right', 'fa fa-caret-square-o-up', 'fa fa-caret-up', 'fa fa-chevron-circle-down', 'fa fa-chevron-circle-left', 'fa fa-chevron-circle-right', 'fa fa-chevron-circle-up', 'fa fa-chevron-down', 'fa fa-chevron-left', 'fa fa-chevron-right', 'fa fa-chevron-up', 'fa fa-hand-o-down', 'fa fa-hand-o-left', 'fa fa-hand-o-right', 'fa fa-hand-o-up', 'fa fa-long-arrow-down', 'fa fa-long-arrow-left', 'fa fa-long-arrow-right', 'fa fa-long-arrow-up', 'fa fa-toggle-down', 'fa fa-toggle-left', 'fa fa-toggle-right', 'fa fa-toggle-up', 'fa fa-arrows-alt', 'fa fa-backward', 'fa fa-compress', 'fa fa-eject', 'fa fa-expand', 'fa fa-fast-backward', 'fa fa-fast-forward', 'fa fa-forward', 'fa fa-pause', 'fa fa-play', 'fa fa-play-circle', 'fa fa-play-circle-o', 'fa fa-step-backward', 'fa fa-step-forward', 'fa fa-stop', 'fa fa-youtube-play');
    $icons = array_merge($icons, $font_awesome);
  }
  if($type == 'brands' || $type == 'all') {
    $brands = array('icon-duckduckgo', 'icon-aim', 'icon-delicious', 'icon-paypal', 'icon-flattr', 'icon-android', 'icon-eventful', 'icon-smashmag', 'icon-gplus', 'icon-wikipedia', 'icon-lanyrd', 'icon-calendar', 'icon-stumbleupon', 'icon-fivehundredpx', 'icon-pinterest', 'icon-bitcoin', 'icon-w3c', 'icon-foursquare', 'icon-html5', 'icon-ie', 'icon-call', 'icon-grooveshark', 'icon-ninetyninedesigns', 'icon-forrst', 'icon-digg', 'icon-spotify', 'icon-reddit', 'icon-guest', 'icon-gowalla', 'icon-appstore', 'icon-blogger', 'icon-cc', 'icon-dribbble', 'icon-evernote', 'icon-flickr', 'icon-google', 'icon-viadeo', 'icon-instapaper', 'icon-weibo', 'icon-klout', 'icon-linkedin', 'icon-meetup', 'icon-vk', 'icon-plancast', 'icon-disqus', 'icon-rss', 'icon-skype', 'icon-twitter', 'icon-youtube', 'icon-vimeo', 'icon-windows', 'icon-xing', 'icon-yahoo', 'icon-chrome', 'icon-email', 'icon-macstore', 'icon-myspace', 'icon-podcast', 'icon-amazon', 'icon-steam', 'icon-cloudapp', 'icon-dropbox', 'icon-ebay', 'icon-facebook', 'icon-github', 'icon-googleplay', 'icon-itunes', 'icon-plurk', 'icon-songkick', 'icon-lastfm', 'icon-gmail', 'icon-pinboard', 'icon-openid', 'icon-quora', 'icon-soundcloud', 'icon-tumblr', 'icon-eventasaurus', 'icon-wordpress', 'icon-yelp', 'icon-intensedebate', 'icon-eventbrite', 'icon-scribd', 'icon-posterous', 'icon-stripe', 'icon-opentable', 'icon-cart', 'icon-print', 'icon-angellist', 'icon-instagram', 'icon-dwolla', 'icon-appnet', 'icon-statusnet', 'icon-acrobat', 'icon-drupal', 'icon-buffer', 'icon-pocket', 'icon-bitbucket');
    $icons = array_merge($icons, $brands);
  }
  if($type == 'ionicons' || $type == 'all' ){

    $brands = array(
      "ion-alert","ion-alert-circled","ion-android-add","ion-android-add-circle","ion-android-alarm-clock","ion-android-alert","ion-android-apps","ion-android-archive","ion-android-arrow-back","ion-android-arrow-down","ion-android-arrow-dropdown","ion-android-arrow-dropdown-circle","ion-android-arrow-dropleft","ion-android-arrow-dropleft-circle","ion-android-arrow-dropright","ion-android-arrow-dropright-circle","ion-android-arrow-dropup","ion-android-arrow-dropup-circle","ion-android-arrow-forward","ion-android-arrow-up","ion-android-attach","ion-android-bar","ion-android-bicycle","ion-android-boat","ion-android-bookmark","ion-android-bulb","ion-android-bus","ion-android-calendar","ion-android-call","ion-android-camera","ion-android-cancel","ion-android-car","ion-android-cart","ion-android-chat","ion-android-checkbox","ion-android-checkbox-blank","ion-android-checkbox-outline","ion-android-checkbox-outline-blank","ion-android-checkmark-circle","ion-android-clipboard","ion-android-close","ion-android-cloud","ion-android-cloud-circle","ion-android-cloud-done","ion-android-cloud-outline","ion-android-color-palette","ion-android-compass","ion-android-contact","ion-android-contacts","ion-android-contract","ion-android-create","ion-android-delete","ion-android-desktop","ion-android-document","ion-android-done","ion-android-done-all","ion-android-download","ion-android-drafts","ion-android-exit","ion-android-expand","ion-android-favorite","ion-android-favorite-outline","ion-android-film","ion-android-folder","ion-android-folder-open","ion-android-funnel","ion-android-globe","ion-android-hand","ion-android-hangout","ion-android-happy","ion-android-home","ion-android-image","ion-android-laptop","ion-android-list","ion-android-locate","ion-android-lock","ion-android-mail","ion-android-map","ion-android-menu","ion-android-microphone","ion-android-microphone-off","ion-android-more-horizontal","ion-android-more-vertical","ion-android-navigate","ion-android-notifications","ion-android-notifications-none","ion-android-notifications-off","ion-android-open","ion-android-options","ion-android-people","ion-android-person","ion-android-person-add","ion-android-phone-landscape","ion-android-phone-portrait","ion-android-pin","ion-android-plane","ion-android-playstore","ion-android-print","ion-android-radio-button-off","ion-android-radio-button-on","ion-android-refresh","ion-android-remove","ion-android-remove-circle","ion-android-restaurant","ion-android-sad","ion-android-search","ion-android-send","ion-android-settings","ion-android-share","ion-android-share-alt","ion-android-star","ion-android-star-half","ion-android-star-outline","ion-android-stopwatch","ion-android-subway","ion-android-sunny","ion-android-sync","ion-android-textsms","ion-android-time","ion-android-train","ion-android-unlock","ion-android-upload","ion-android-volume-down","ion-android-volume-mute","ion-android-volume-off","ion-android-volume-up","ion-android-walk","ion-android-warning","ion-android-watch","ion-android-wifi","ion-aperture","ion-archive","ion-arrow-down-a","ion-arrow-down-b","ion-arrow-down-c","ion-arrow-expand","ion-arrow-graph-down-left","ion-arrow-graph-down-right","ion-arrow-graph-up-left","ion-arrow-graph-up-right","ion-arrow-left-a","ion-arrow-left-b","ion-arrow-left-c","ion-arrow-move","ion-arrow-resize","ion-arrow-return-left","ion-arrow-return-right","ion-arrow-right-a","ion-arrow-right-b","ion-arrow-right-c","ion-arrow-shrink","ion-arrow-swap","ion-arrow-up-a","ion-arrow-up-b","ion-arrow-up-c","ion-asterisk","ion-at","ion-backspace","ion-backspace-outline","ion-bag","ion-battery-charging","ion-battery-empty","ion-battery-full","ion-battery-half","ion-battery-low","ion-beaker","ion-beer","ion-bluetooth","ion-bonfire","ion-bookmark","ion-bowtie","ion-briefcase","ion-bug","ion-calculator","ion-calendar","ion-camera","ion-card","ion-cash","ion-chatbox","ion-chatbox-working","ion-chatboxes","ion-chatbubble","ion-chatbubble-working","ion-chatbubbles","ion-checkmark","ion-checkmark-circled","ion-checkmark-round","ion-chevron-down","ion-chevron-left","ion-chevron-right","ion-chevron-up","ion-clipboard","ion-clock","ion-close","ion-close-circled","ion-close-round","ion-closed-captioning","ion-cloud","ion-code","ion-code-download","ion-code-working","ion-coffee","ion-compass","ion-compose","ion-connection-bars","ion-contrast","ion-crop","ion-cube","ion-disc","ion-document","ion-document-text","ion-drag","ion-earth","ion-easel","ion-edit","ion-egg","ion-eject","ion-email","ion-email-unread","ion-erlenmeyer-flask","ion-erlenmeyer-flask-bubbles","ion-eye","ion-eye-disabled","ion-female","ion-filing","ion-film-marker","ion-fireball","ion-flag","ion-flame","ion-flash","ion-flash-off","ion-folder","ion-fork","ion-fork-repo","ion-forward","ion-funnel","ion-gear-a","ion-gear-b","ion-grid","ion-hammer","ion-happy","ion-happy-outline","ion-headphone","ion-heart","ion-heart-broken","ion-help","ion-help-buoy","ion-help-circled","ion-home","ion-icecream","ion-image","ion-images","ion-information","ion-information-circled","ion-ionic","ion-ios-alarm","ion-ios-alarm-outline","ion-ios-albums","ion-ios-albums-outline","ion-ios-americanfootball","ion-ios-americanfootball-outline","ion-ios-analytics","ion-ios-analytics-outline","ion-ios-arrow-back","ion-ios-arrow-down","ion-ios-arrow-forward","ion-ios-arrow-left","ion-ios-arrow-right","ion-ios-arrow-thin-down","ion-ios-arrow-thin-left","ion-ios-arrow-thin-right","ion-ios-arrow-thin-up","ion-ios-arrow-up","ion-ios-at","ion-ios-at-outline","ion-ios-barcode","ion-ios-barcode-outline","ion-ios-baseball","ion-ios-baseball-outline","ion-ios-basketball","ion-ios-basketball-outline","ion-ios-bell","ion-ios-bell-outline","ion-ios-body","ion-ios-body-outline","ion-ios-bolt","ion-ios-bolt-outline","ion-ios-book","ion-ios-book-outline","ion-ios-bookmarks","ion-ios-bookmarks-outline","ion-ios-box","ion-ios-box-outline","ion-ios-briefcase","ion-ios-briefcase-outline","ion-ios-browsers","ion-ios-browsers-outline","ion-ios-calculator","ion-ios-calculator-outline","ion-ios-calendar","ion-ios-calendar-outline","ion-ios-camera","ion-ios-camera-outline","ion-ios-cart","ion-ios-cart-outline","ion-ios-chatboxes","ion-ios-chatboxes-outline","ion-ios-chatbubble","ion-ios-chatbubble-outline","ion-ios-checkmark","ion-ios-checkmark-empty","ion-ios-checkmark-outline","ion-ios-circle-filled","ion-ios-circle-outline","ion-ios-clock","ion-ios-clock-outline","ion-ios-close","ion-ios-close-empty","ion-ios-close-outline","ion-ios-cloud","ion-ios-cloud-download","ion-ios-cloud-download-outline","ion-ios-cloud-outline","ion-ios-cloud-upload","ion-ios-cloud-upload-outline","ion-ios-cloudy","ion-ios-cloudy-night","ion-ios-cloudy-night-outline","ion-ios-cloudy-outline","ion-ios-cog","ion-ios-cog-outline","ion-ios-color-filter","ion-ios-color-filter-outline","ion-ios-color-wand","ion-ios-color-wand-outline","ion-ios-compose","ion-ios-compose-outline","ion-ios-contact","ion-ios-contact-outline","ion-ios-copy","ion-ios-copy-outline","ion-ios-crop","ion-ios-crop-strong","ion-ios-download","ion-ios-download-outline","ion-ios-drag","ion-ios-email","ion-ios-email-outline","ion-ios-eye","ion-ios-eye-outline","ion-ios-fastforward","ion-ios-fastforward-outline","ion-ios-filing","ion-ios-filing-outline","ion-ios-film","ion-ios-film-outline","ion-ios-flag","ion-ios-flag-outline","ion-ios-flame","ion-ios-flame-outline","ion-ios-flask","ion-ios-flask-outline","ion-ios-flower","ion-ios-flower-outline","ion-ios-folder","ion-ios-folder-outline","ion-ios-football","ion-ios-football-outline","ion-ios-game-controller-a","ion-ios-game-controller-a-,outline","ion-ios-game-controller-b","ion-ios-game-controller-b-outline","ion-ios-gear","ion-ios-gear-outline","ion-ios-glasses","ion-ios-glasses-outline","ion-ios-grid-view","ion-ios-grid-view-outline","ion-ios-heart","ion-ios-heart-outline","ion-ios-help","ion-ios-help-empty","ion-ios-help-outline","ion-ios-home","ion-ios-home-outline","ion-ios-infinite","ion-ios-infinite-outline","ion-ios-information","ion-ios-information-empty","ion-ios-information-outline","ion-ios-ionic-outline","ion-ios-keypad","ion-ios-keypad-outline","ion-ios-lightbulb","ion-ios-lightbulb-outline","ion-ios-list","ion-ios-list-outline","ion-ios-location","ion-ios-location-outline","ion-ios-locked","ion-ios-locked-outline","ion-ios-loop","ion-ios-loop-strong","ion-ios-medical","ion-ios-medical-outline","ion-ios-medkit","ion-ios-medkit-outline","ion-ios-mic","ion-ios-mic-off","ion-ios-mic-outline","ion-ios-minus","ion-ios-minus-empty","ion-ios-minus-outline","ion-ios-monitor","ion-ios-monitor-outline","ion-ios-moon","ion-ios-moon-outline","ion-ios-more","ion-ios-more-outline","ion-ios-musical-note","ion-ios-musical-notes","ion-ios-navigate","ion-ios-navigate-outline","ion-ios-nutrition","ion-ios-nutrition-outline","ion-ios-paper","ion-ios-paper-outline","ion-ios-paperplane","ion-ios-paperplane-outline","ion-ios-partlysunny","ion-ios-partlysunny-outline","ion-ios-pause","ion-ios-pause-outline","ion-ios-paw","ion-ios-paw-outline","ion-ios-people","ion-ios-people-outline","ion-ios-person","ion-ios-person-outline","ion-ios-personadd","ion-ios-personadd-outline","ion-ios-photos","ion-ios-photos-outline","ion-ios-pie","ion-ios-pie-outline","ion-ios-pint","ion-ios-pint-outline","ion-ios-play","ion-ios-play-outline","ion-ios-plus","ion-ios-plus-empty","ion-ios-plus-outline","ion-ios-pricetag","ion-ios-pricetag-outline","ion-ios-pricetags","ion-ios-pricetags-outline","ion-ios-printer","ion-ios-printer-outline","ion-ios-pulse","ion-ios-pulse-strong","ion-ios-rainy","ion-ios-rainy-outline","ion-ios-recording","ion-ios-recording-outline","ion-ios-redo","ion-ios-redo-outline","ion-ios-refresh","ion-ios-refresh-empty","ion-ios-refresh-outline","ion-ios-reload","ion-ios-reverse-camera","ion-ios-reverse-camera-outline","ion-ios-rewind","ion-ios-rewind-outline","ion-ios-rose","ion-ios-rose-outline","ion-ios-search","ion-ios-search-strong","ion-ios-settings","ion-ios-settings-strong","ion-ios-shuffle","ion-ios-shuffle-strong","ion-ios-skipbackward","ion-ios-skipbackward-outline","ion-ios-skipforward","ion-ios-skipforward-outline","ion-ios-snowy","ion-ios-speedometer","ion-ios-speedometer-outline","ion-ios-star","ion-ios-star-half","ion-ios-star-outline","ion-ios-stopwatch","ion-ios-stopwatch-outline","ion-ios-sunny","ion-ios-sunny-outline","ion-ios-telephone","ion-ios-telephone-outline","ion-ios-tennisball","ion-ios-tennisball-outline","ion-ios-thunderstorm","ion-ios-thunderstorm-outline","ion-ios-time","ion-ios-time-outline","ion-ios-timer","ion-ios-timer-outline","ion-ios-toggle","ion-ios-toggle-outline","ion-ios-trash","ion-ios-trash-outline","ion-ios-undo","ion-ios-undo-outline","ion-ios-unlocked","ion-ios-unlocked-outline","ion-ios-upload","ion-ios-upload-outline","ion-ios-videocam","ion-ios-videocam-outline","ion-ios-volume-high","ion-ios-volume-low","ion-ios-wineglass","ion-ios-wineglass-outline","ion-ios-world","ion-ios-world-outline","ion-ipad","ion-iphone","ion-ipod","ion-jet","ion-key","ion-knife","ion-laptop","ion-leaf","ion-levels","ion-lightbulb","ion-link","ion-load-a","ion-load-b","ion-load-c","ion-load-d","ion-location","ion-lock-combination","ion-locked","ion-log-in","ion-log-out","ion-loop","ion-magnet","ion-male","ion-man","ion-map","ion-medkit","ion-merge","ion-mic-a","ion-mic-b","ion-mic-c","ion-minus","ion-minus-circled","ion-minus-round","ion-model-s","ion-monitor","ion-more","ion-mouse","ion-music-note","ion-navicon","ion-navicon-round","ion-navigate","ion-network","ion-no-smoking","ion-nuclear","ion-outlet","ion-paintbrush","ion-paintbucket","ion-paper-airplane","ion-paperclip","ion-pause","ion-person","ion-person-add","ion-person-stalker","ion-pie-graph","ion-pin","ion-pinpoint","ion-pizza","ion-plane","ion-planet","ion-play","ion-playstation","ion-plus","ion-plus-circled","ion-plus-round","ion-podium","ion-pound","ion-power","ion-pricetag","ion-pricetags","ion-printer","ion-pull-request","ion-qr-scanner","ion-quote","ion-radio-waves","ion-record","ion-refresh","ion-reply","ion-reply-all","ion-ribbon-a","ion-ribbon-b","ion-sad","ion-sad-outline","ion-scissors","ion-search","ion-settings","ion-share","ion-shuffle","ion-skip-backward","ion-skip-forward","ion-social-android","ion-social-android-outline","ion-social-angular","ion-social-angular-outline","ion-social-apple","ion-social-apple-outline","ion-social-bitcoin","ion-social-bitcoin-outline","ion-social-buffer","ion-social-buffer-outline","ion-social-chrome","ion-social-chrome-outline","ion-social-codepen","ion-social-codepen-outline","ion-social-css3","ion-social-css3-outline","ion-social-designernews","ion-social-designernews-outline","ion-social-dribbble","ion-social-dribbble-outline","ion-social-dropbox","ion-social-dropbox-outline","ion-social-euro","ion-social-euro-outline","ion-social-facebook","ion-social-facebook-outline","ion-social-foursquare","ion-social-foursquare-outline","ion-social-freebsd-devil","ion-social-github","ion-social-github-outline","ion-social-google","ion-social-google-outline","ion-social-googleplus","ion-social-googleplus-outline","ion-social-hackernews","ion-social-hackernews-outline","ion-social-html5","ion-social-html5-outline","ion-social-instagram","ion-social-instagram-outline","ion-social-javascript","ion-social-javascript-outline","ion-social-linkedin","ion-social-linkedin-outline","ion-social-markdown","ion-social-nodejs","ion-social-octocat","ion-social-pinterest","ion-social-pinterest-outline","ion-social-python","ion-social-reddit","ion-social-reddit-outline","ion-social-rss","ion-social-rss-outline","ion-social-sass","ion-social-skype","ion-social-skype-outline","ion-social-snapchat","ion-social-snapchat-outline","ion-social-tumblr","ion-social-tumblr-outline","ion-social-tux","ion-social-twitch","ion-social-twitch-outline","ion-social-twitter","ion-social-twitter-outline","ion-social-usd","ion-social-usd-outline","ion-social-vimeo","ion-social-vimeo-outline","ion-social-whatsapp","ion-social-whatsapp-outline","ion-social-windows","ion-social-windows-outline","ion-social-wordpress","ion-social-wordpress-outline","ion-social-yahoo","ion-social-yahoo-outline","ion-social-yen","ion-social-yen-outline","ion-social-youtube","ion-social-youtube-outline","ion-soup-can","ion-soup-can-outline","ion-speakerphone","ion-speedometer","ion-spoon","ion-star","ion-stats-bars","ion-steam","ion-stop","ion-thermometer","ion-thumbsdown","ion-thumbsup","ion-toggle","ion-toggle-filled","ion-transgender","ion-trash-a","ion-trash-b","ion-trophy","ion-tshirt","ion-tshirt-outline","ion-umbrella","ion-university","ion-unlocked","ion-upload","ion-usb","ion-videocamera","ion-volume-high","ion-volume-low","ion-volume-medium","ion-volume-mute","ion-wand","ion-waterdrop","ion-wifi","ion-wineglass","ion-woman","ion-wrench","ion-xbox",
    );
    $icons = array_merge($icons, $brands);
  }
  if($type == 'et-icon' || $type == 'all' ){
    $brands = array("icon-mobile", "icon-laptop", "icon-desktop", "icon-tablet", "icon-phone", "icon-document", "icon-documents", "icon-search", "icon-clipboard", "icon-newspaper", "icon-notebook", "icon-book-open", "icon-browser", "icon-calendar", "icon-presentation", "icon-picture", "icon-pictures", "icon-video", "icon-camera", "icon-printer", "icon-toolbox", "icon-briefcase", "icon-wallet", "icon-gift", "icon-bargraph", "icon-grid", "icon-expand", "icon-focus", "icon-edit", "icon-adjustments", "icon-ribbon", "icon-hourglass", "icon-lock", "icon-megaphone", "icon-shield", "icon-trophy", "icon-flag", "icon-map", "icon-puzzle", "icon-basket", "icon-envelope", "icon-streetsign", "icon-telescope", "icon-gears", "icon-key", "icon-paperclip", "icon-attachment", "icon-pricetags", "icon-lightbulb", "icon-layers", "icon-pencil", "icon-tools", "icon-tools-2", "icon-scissors", "icon-paintbrush", "icon-magnifying-glass", "icon-circle-compass", "icon-linegraph", "icon-mic", "icon-strategy", "icon-beaker", "icon-caution", "icon-recycle", "icon-anchor", "icon-profile-male", "icon-profile-female", "icon-bike", "icon-wine", "icon-hotairballoon", "icon-globe", "icon-genius", "icon-map-pin", "icon-dial", "icon-chat", "icon-heart", "icon-cloud", "icon-upload", "icon-download", "icon-target", "icon-hazardous", "icon-piechart", "icon-speedometer", "icon-global", "icon-compass", "icon-lifesaver", "icon-clock", "icon-aperture", "icon-quote", "icon-scope", "icon-alarmclock", "icon-refresh", "icon-happy", "icon-sad", "icon-facebook", "icon-twitter", "icon-googleplus", "icon-rss", "icon-tumblr", "icon-linkedin", "icon-dribbble");
    $icons = array_merge($icons, $brands);
  }
  if($type == 'flaticon' || $type == 'all'){
    $brands = array('flaticon-app-developing','flaticon-arrow','flaticon-arrow164','flaticon-arrow487','flaticon-arrows','flaticon-arrows-1','flaticon-arrows-2','flaticon-athlete','flaticon-bank43','flaticon-box','flaticon-building','flaticon-buildings','flaticon-business','flaticon-business-1','flaticon-button14','flaticon-calendar','flaticon-calendars12','flaticon-cancel30','flaticon-check-mark','flaticon-clocks18','flaticon-clothes17','flaticon-cogwheels10','flaticon-connection22','flaticon-construction','flaticon-container','flaticon-daffodil','flaticon-destination','flaticon-diamond7','flaticon-documentation','flaticon-download168','flaticon-drupal','flaticon-earth-globe21','flaticon-email141','flaticon-exclamation-mark1','flaticon-expand47','flaticon-facebook55','flaticon-first27','flaticon-floppy20','flaticon-graphic','flaticon-gym','flaticon-gym-1','flaticon-gym-2','flaticon-healthy','flaticon-hearts49','flaticon-home','flaticon-html5','flaticon-improvement','flaticon-info31','flaticon-interface','flaticon-jasmine','flaticon-jonquil','flaticon-joomla','flaticon-laptops2','flaticon-layer13','flaticon-left16','flaticon-letters22','flaticon-lightning24','flaticon-lights7','flaticon-links21','flaticon-list65','flaticon-location1','flaticon-logotype171','flaticon-magnifying-glass34','flaticon-magnifying-glass84','flaticon-medical','flaticon-medical-1','flaticon-medical-10','flaticon-medical-11','flaticon-medical-12','flaticon-medical-13','flaticon-medical-2','flaticon-medical-3','flaticon-medical-4','flaticon-medical-5','flaticon-medical-6','flaticon-medical-7','flaticon-medical-8','flaticon-medical-9','flaticon-men25','flaticon-money','flaticon-monitor','flaticon-mug16','flaticon-multimedia','flaticon-nature','flaticon-nature-1','flaticon-other','flaticon-paint-palette1','flaticon-parcel','flaticon-pause-button3','flaticon-pencils13','flaticon-people','flaticon-people-1','flaticon-people-2','flaticon-people-4','flaticon-people-5','flaticon-photo246','flaticon-pinterest3','flaticon-placeholders4','flaticon-play-circular-button','flaticon-play-video3','flaticon-portfolio2','flaticon-post','flaticon-price-tag5','flaticon-profile5','flaticon-questions6','flaticon-raindrop','flaticon-return13','flaticon-share58','flaticon-shield','flaticon-shopping-carts6','flaticon-shopping-store12','flaticon-smartphones23','flaticon-social','flaticon-social-network106','flaticon-social-network156','flaticon-speaker23','flaticon-speech117','flaticon-sport','flaticon-stopwatch','flaticon-surya','flaticon-technology','flaticon-time','flaticon-tool','flaticon-tool-1','flaticon-tool-2','flaticon-tool-3','flaticon-transport','flaticon-transport-1','flaticon-transport-2','flaticon-transport-3','flaticon-transport-4','flaticon-truck','flaticon-truck-1','flaticon-twitter1','flaticon-user-avatar8','flaticon-wallflower','flaticon-wordpress');
    $icons = array_merge($icons, $brands);
  }
  $matches = array();
  foreach ($icons as $icon) {
    if(stripos($icon, $str) !== FALSE) {
      $matches[$icon] = '<i class = "' . $icon . '"><i> ' . $icon;
    }
  }
  drupal_json_output($matches);
}

function nd_visualshortcodes_ajax_node_autocomplete($str) {
  $query = db_select('node', 'n');
  $return = $query
    ->fields('n', array('nid', 'title'))
    ->condition('n.title', '%' . db_like($str) . '%', 'LIKE')
    ->range(0, 15)
    ->execute();
  $matches = array();
  foreach ($return as $row) {
    $matches['node/' . $row->nid . '/edit'] = check_plain($row->title);
  }
  drupal_json_output($matches);
}



/**
 * Implements hook_init().
 */
function nd_visualshortcodes_init()
{
  drupal_add_js(array('pathmodule'=>drupal_get_path('module','nd_visualshortcodes')),'setting');

  /** Attach Owl  */
  drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/owl.carousel.min.js');
  drupal_add_css(drupal_get_path('module', 'nd_visualshortcodes') . '/css/owl.carousel.css');
  //drupal_add_css(drupal_get_path('module', 'nd_visualshortcodes') . '/css/owl.theme.css');
  drupal_add_css(drupal_get_path('module', 'nd_visualshortcodes') . '/css/owl.transitions.css');

  drupal_add_js(drupal_get_path('module', 'nd_visualshortcodes') . '/js/jquery.appear.js');
  drupal_add_css(drupal_get_path('module','nd_visualshortcodes') . '/css/animate_progressive.css');
}
/**
 * Implements hook_form_alter().
 */
function nd_visualshortcodes_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'i18n_string_translate_page_form') {
    // Loop all strings.
    foreach ($form['strings']['all'] as $name => $field) {
      // The field for [ block title / vocabulary name / vocabulary description / term name ] are textfields in ori language,
      // but textareas when translating: change these to textfields.
      if (
        preg_match('/blocks:block:[0-9]+:title/i' , $name) ||
        preg_match('/taxonomy:(vocabulary|term):[0-9]+:name/i' , $name) ||
        preg_match('/taxonomy:vocabulary:[0-9]+:description/i' , $name)
      ) {
        $form['strings']['all'][$name]['#type'] = 'textfield';
      }
      // Change textarea to text_format and overwrite description which is already auto included in text_format fields.
      elseif (
        preg_match('/blocks:block:[0-9]+:body/i' , $name) ||
        preg_match('/taxonomy:term:[0-9]+:description/i' , $name)
      ) {
        $form['strings']['all'][$name]['#type'] = 'text_format';
        $form['strings']['all'][$name]['#format'] = 'plain_text';
        $form['strings']['all'][$name]['#description'] = '<br />';
      }
    }
    // Add submit function.
    $form['#submit'] = array_merge(array('_nd_visualshortcodes_form_submit') , $form['#submit']);
  }
}

function _nd_visualshortcodes_form_submit($form, &$form_state) {
  // Remove wysiwyg format because i18n cant handle it.
  foreach ($form_state['values']['strings'] as $name => $field) {
    if (
      preg_match('/blocks:block:[0-9]+:body/i' , $name) ||
      preg_match('/taxonomy:term:[0-9]+:description/i' , $name)
    ){
      unset($form_state['values']['strings'][$name]['format']);
    }
  }
}

/**
 * Implementation of hook_filter_info().
 */
function nd_visualshortcodes_filter_info() {
  $filters['shortcode_dynamic'] = array(
      'title' => t('Shortcodes Dynamic'),
      'description' => t('Alias of Shortcodes with disabled CACHE. Use for dynamic content such as VIEW.'),
      'process callback' => '_nd_visualshortcodes_shortcode_process',
      'settings callback' => '_shortcode_settings_form',
      'tips callback' => '_nd_visualshortcodes_shortcode_filter_tips',
      'cache' => FALSE,
  );

  return $filters;
}

/**
 * Implementation of hook_filter_info().
 */
function nd_visualshortcodes_filter_info_alter(&$info) {
  if(isset($info['shortcode'])) {
    $info['shortcode']['process callback'] = '_nd_visualshortcodes_static_shortcode_process';
  }
}

/**
 * Processes the Static Shortcodes according to the text and the text format.
 */
function _nd_visualshortcodes_static_shortcode_process($text, $filter) {
  $text = str_replace(array('{{', '}}', '|{', '|}'), array('[', ']', '<', '>'), $text);
  return _shortcode_process($text, $filter);
}

/**
 * Processes the Dynamic Shortcodes according to the text and the text format.
 */
function _nd_visualshortcodes_shortcode_process($text, $filter) {
  $text = str_replace(array('{{', '}}', '|{', '|}'), array('[', ']', '<', '>'), $text);
  $shortcodes = shortcode_list_all();
  $shortcodes_enabled = array();
  foreach ($filter->settings as $name => $value) {
    if ($value && !empty($shortcodes[$name]['process callback'])) {
      $shortcodes_enabled[$name] = array(
          'function' => $shortcodes[$name]['process callback'],
      );
    }
  }

  if (empty($shortcodes_enabled)) {
    return $text;
  }

  // Save the Shortcodes in the local cache.
  _shortcode_tags($shortcodes_enabled);

  // Processing recursively, now embeding tags within other tags is supported!
  $chunks = preg_split('!(\[{1,2}.*?\]{1,2})!', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  $heap = array();
  $heap_index = array();

  foreach ($chunks as $c) {
    if (!$c) {
      continue;
    }

    $escaped = FALSE;

    if ((substr($c, 0, 2) == '[[') && (substr($c, -2, 2) == ']]')) {
      $escaped = TRUE;
      // Checks media tags, eg: [[{ }]].
      if ((substr($c, 0, 3) != '{') && (substr($c, -3, 1) != '}')) {
        // Removes the outer [].
        $c = substr($c, 1, -1);
      }
    }
    // Decide this is a Shortcode tag or not.
    if (!$escaped && ($c[0] == '[') && (substr($c, -1, 1) == ']')) {
      // The $c maybe contains Shortcode macro.

      // This is maybe a self-closing tag.
      // Removes outer [].
      $original_text = $c;
      $c = substr($c, 1, -1);
      $c = trim($c);

      $ts = explode(' ', $c);
      $tag = array_shift($ts);
      $tag = trim($tag, '/');

      if (!isset($shortcodes_enabled[$tag])) {
        // The current tag is not enabled.
        array_unshift($heap_index, '_string_');
        array_unshift($heap, $original_text);
      }
      elseif (substr($c, -1, 1) == '/') {
        // Processes a self closing tag, - it has "/" at the end-
        /*
         * The exploded array elements meaning:
         * 0 - the full tag text?
         * 1/5 - An extra [] to allow for escaping Shortcodes with double [[]].
         * 2 - The Shortcode name.
         * 3 - The Shortcode argument list.
         * 4 - The content of a Shortcode when it wraps some content.
         */

        $m = array(
            $c,
            '',
            $tag,
            implode(' ', $ts),
            NULL,
            '',
        );
        array_unshift($heap_index, '_string_');
        array_unshift($heap, _shortcode_process_tag($m));
        // In shortcode can be used another Format with differents shortcodes, so restore the cache
        _shortcode_tags($shortcodes_enabled);
      }
      elseif ($c[0] == '/') {
        // Indicate a closing tag, so we process the heap.
        $closing_tag = substr($c, 1);

        $process_heap = array();
        $process_heap_index = array();
        $found = FALSE;

        // Get elements from heap and process.
        do {
          $tag = array_shift($heap_index);
          $heap_text = array_shift($heap);

          if ($closing_tag == $tag) {
            // Process the whole tag.
            $m = array(
                $tag . ' ' . $heap_text,
                '',
                $tag,
                $heap_text,
                implode('', $process_heap),
                '',
            );
            $str = _shortcode_process_tag($m);
            // In shortcode can be used another Format with differents shortcodes, so restore the cache
            _shortcode_tags($shortcodes_enabled);
            array_unshift($heap_index, '_string_');
            array_unshift($heap, $str);
            $found = TRUE;
          }
          else {
            array_unshift($process_heap, $heap_text);
            array_unshift($process_heap_index, $tag);
          }
        } while (!$found && $heap);

        if (!$found) {
          foreach ($process_heap as $val) {
            array_unshift($heap, $val);
          }
          foreach ($process_heap_index as $val) {
            array_unshift($heap_index, $val);
          }
        }

      }
      else {
        // This is a starting tag. Put it to the heap.
        array_unshift($heap_index, $tag);
        array_unshift($heap, implode(' ', $ts));
      }
      // If escaped or not a Shortcode.
    }
    else {
      // Maybe not found a pair?
      array_unshift($heap_index, '_string_');
      array_unshift($heap, $c);
    }
    // End of foreach.
  }

  return (implode('', array_reverse($heap)));
}

/**
 * Provides filter tips callback.
 */
function _nd_visualshortcodes_shortcode_filter_tips($filter, $format, $long = FALSE) {
  $shortcodes = _nd_visualshortcodes_shortcode_list_all_enabled($format);
  $tips = array();
  foreach ($filter->settings as $name => $enabled) {
    if ($enabled && !empty($shortcodes[$name]['tips callback']) && is_string($shortcodes[$name]['tips callback']) && function_exists($shortcodes[$name]['tips callback'])) {
      $tips[] = call_user_func_array($shortcodes[$name]['tips callback'], array($format, $long));
    }
  }
  return theme('item_list',
      array(
          'title' => t('Shortcodes usage'),
          'items' => $tips,
          'type' => 'ol',
      )
  );
}

/**
 * Returns only enabled Shortcodes for a specified input format.
 */
function _nd_visualshortcodes_shortcode_list_all_enabled($format, $reset = FALSE) {
  if (is_string($format)) {
    $format = filter_format_load($format);
  }

  $shortcodes_enabled = &drupal_static(__FUNCTION__, array());

  if (isset($shortcodes_enabled[$format->format]) && !$reset) {
    return $shortcodes_enabled[$format->format];
  }
  $shortcodes_enabled[$format->format] = array();

  $shortcodes = shortcode_list_all($reset);
  $filters = filter_list_format($format->format);

  if (empty($filters['shortcode_dynamic'])) {
    return array();
  }

  // Run through all Shortcodes defined.
  foreach ($filters['shortcode_dynamic']->settings as $name => $enabled) {
    if ($enabled) {
      $shortcodes_enabled[$format->format][$name] = $shortcodes[$name];
    }
  }

  return $shortcodes_enabled[$format->format];
}
